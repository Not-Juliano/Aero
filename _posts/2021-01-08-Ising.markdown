---
title:  "Ising Model"
date:   2021-01-08 15:04:23
categories: [Statistical Mechanics]
tags: [Ising]
---
The Ising model is an example of a Canonical ensemble in thermodynamics. In most cases; It’s used to theoretically describe ferromagnetism, and used for phase transitions.
The model was invented by Wilhelm Lenz in 1920 and is named after Ernst Ising who solved it in 1D [source](http://farside.ph.utexas.edu/teaching/329/lectures/node110.html)
The model has gained the love of some physicist because it applies to many areas and it allows computations of thermodynamic quantities in a system. (Energy, Specific heat, Entropy ect.)


So how does the model work? In essence you can break this ensemble down into three main parts. A hamiltonian, Spin dynamics, and phase transitions.
The Equation is shown below:

<a href="https://www.codecogs.com/eqnedit.php?latex={\color{Blue}&space;\boldsymbol{H}=\sum_{ij}^{}\boldsymbol{J}_{ij}\boldsymbol{\sigma_{i}}\boldsymbol{\sigma_{j}}-\sum_{i}^{}\boldsymbol{h}_{i}\boldsymbol{\sigma_{i}}}" target="_blank"><img src="https://latex.codecogs.com/svg.latex?{\color{Blue}&space;\boldsymbol{H}=\sum_{ij}^{}\boldsymbol{J}_{ij}\boldsymbol{\sigma_{i}}\boldsymbol{\sigma_{j}}-\sum_{i}^{}\boldsymbol{h}_{i}\boldsymbol{\sigma_{i}}}" title="{\color{Blue} \boldsymbol{H}=\sum_{ij}^{}\boldsymbol{J}_{ij}\boldsymbol{\sigma_{i}}\boldsymbol{\sigma_{j}}-\sum_{i}^{}\boldsymbol{h}_{i}\boldsymbol{\sigma_{i}}}" /></a>



J is the coupling strength. (How strongly these things interact). 

σ represents each spin. 

h is the external magnetic field


J also tells you how these things prefer to align.

When J>0, the spin wants to be like neighbors- making this interaction ferromagnetic 


<img src= "https://lh3.googleusercontent.com/pw/ACtC-3fUYQ-HaKMIsog-RES1NLZDyEzwBo0tPXxdcVOM8q5iU0UOZIHPe6tfZIXc2BSCoKrfE2tuyyo_WfzOqscV4EjxdY12XruW5wBdijyvW2GD7M2k_4R1lMQqVpfivS9hu0O9p5jrw6RptiSUn-Ir8sQ=s137-no?authuser=0">


When J<0, the spin wants to be unlike it's neighbors- making this interaction Antiferromagnetic


<img src="https://lh3.googleusercontent.com/pw/ACtC-3dmt0_ffpytuYbO-UepRNm50_UJICLzyW5wekvbwNsyEa8ZRxRenOjcuIt3ErV9truD_QRtxhIWiBRvjKyEtf5n7sL3SP7iE8D7xWRsDj02IPD3oer93jTrGWijBarH-xbgsSQcPxMvJCTs6miy_-E=w150-h134-no?authuser=0">



For every spin, if the change in the Hamiltonian is favorable for the system (Meaning Energy<=0) Switch the spin, Or else switch this spin by a probability.

Probability is given by  the boltzmann factor: exp(-ΔE/kT) and Spins are given by their states, where up is +1, down is -1.

When h=0 the hamiltonian is written as: H= -J (Chosen Spin * Σ Neighbors )

Here's an example of a single spin calculation:


<img src= "https://lh3.googleusercontent.com/US5lcGZtot0ZK3Qb3kieLhXUJbDmuU7OhsoT5pcyu4gGRVisS7nKei77j_eQ8bfhupfZlqKViJzD9g0-bMMs4Hd2tkKDZcGktkkL9pT8auwxDGUEJ96QldI9rdbwVleU2-7sxUF0hZrfJIxZWn6xlHQ1WQZ7l35Yjgh3SEiycDxK19xWmrFG1trYjB-MJ5_0W7CK9ijMiRvnAXE9iGfxtHBLHBP_wpVmEMouHc1CU-4rZhhSnUUmQLdfRjUx7Ks2wbv8PNamDsQsmKgqm4aBUZZEj7np1rPDXmOumNw8GT7Hvo9FAywvMBQIJOYscUhA8f20L8Sl-kRDn1jXt92x4Vxml8XirL5GwIK7yQ160VCk-RqxlCioPrFZHCMcVaktFfYaqswitCtlUV61duFQFOlp4tTJU1s6JX-IyRGNmVu3UmA83WiGQTHPPXbG1t6MnPsk0T3-tlhzSfNdF1KbV7Xz9sb7asdk_Wg7lHtX_MDvPx2xaAoe_zL7JNKw1b56vk3Tf4dJAgUlFUOw2bh1j9PTGdTOiA15QX3FybEIYo7-OkKupfDhwF2M6EzKw5L2MR05NJKdZB6trSMOaxn4iAp92dHHyZqL6Fq33Q1-aX_N5nDWXvGmblcX3A5fNHuNL8I76QwMzMyoPJOd9z7pqWo-N2hBHdcinw6UTPiwJZaAhjEdIoauAZw88uK-y-5DDlYVHtWRo8LuAi8ljg=w536-h226-no?authuser=0">


With this we now have enough information to move onto the coding.

First the imports. 
``` python
#Imports
#pip install Pillow
#pip install ipywidgets

import numpy as np
from math import exp, log, e, sqrt
from ipywidgets import interact
from PIL import Image
import matplotlib.pyplot as plt
from plotly.subplots import make_subplots
import plotly.graph_objects as go
from ipywidgets import interact
```
Next we focus on creating a grid that a user can input values into. Each point on this grid or lattice can be considered a particle with a spin.
``` python
N=int(input('What is the length of one side of your grid?')) #Eg 50 makes a 50x50 grid
M=N #Grid is even. playing with an uneven grid might be fun.

J=int(input('What is the Coupling constant? 1 is most common. '))

kT= float(input('What is your Temperature from 0~6? For critical temperature type 22  '))

if kT==22:
    
    kT = 2 / log(1 + sqrt(2), e)#critical temp from Lars Onsangers solution
    
    print('Critical temperature is given as 2 / log(1 + sqrt(2), e), or', kT, 'and will be used for this system. ')

Mag=[]#Places to store magnetization  values
Energy=[] #Places to store energy values
```


create the random spin grid
``` python
# Each spin has two possible states +1 or −1. So we create a function that chooses between one of the values randomly.

def Initial_Lattice(N,M):
    Spinvalues=[-1,1]
    return np.random.choice(Spinvalues, size=(N, M))




#Here we save it so we can do some calculations from the starting point.

Grid=Initial_Lattice(N,M)
```
Start to create functions to get important values

This calculates Magnetization(m) of the grid, which works out to be the summation of every point

``` python
#If I were to rewrite this code having m= np.sum might lead to quicker times.



def magnetization(Lattice):
    m = 0.0  
    for j in range(0,N):
        for k in range(0,M):  
            m += Lattice[j,k]
  
    return m
``` 
Energy (E)
``` python
def Energy_Of_The_System(Lattice):
    E=0.0
 
    
    for i in range(0,N):
        for j in range(0,M):
            
            Spin= Lattice[i, j] #choosen spin
    
    
            SumOfNeighbors= (Lattice[(i+1)%N, (j)]#Right
                     + Lattice[(i-1)%N, (j)]#left
                     + Lattice[(i) , (j+1)%M]#Up
                     + Lattice[(i) , (j-1)%M])#Down
                     
    
            E+=J*Spin*SumOfNeighbors
        
    return E
#Energy_Of_The_System(Grid)
```
Using Energy calculation to find DeltaE and determine spin flips

``` python

def EnergyCalc(Lattice, i, j):
    
    
    N, M = Lattice.shape #Giving my Lattice a size
    
    
    Spin= Lattice[i, j] #choosen spin
    
    
    SumOfNeighbors= (Lattice[(i+1)%N, (j)]#Right
                     + Lattice[(i-1)%N, (j)]#left
                     + Lattice[(i) , (j+1)%M]#Up
                     + Lattice[(i) , (j-1)%M])#Down
                     
    
    
    
    dE = (2*J)*(Spin*SumOfNeighbors) #Formula for dE
                   
                   
    if dE <= 0 or exp(-dE / kT) > np.random.random(): #If dE <=0 or boltzmann factor greater than random swtich
        Lattice[i, j] *= -1
```
Creating movement through the lattice


``` python
#This is the simplest case, but experimenting with other iterations over the grid can lead to changed results.

#I've found going randomly across the lattice caused the grid to continue to be random. 
#there might be a proper way to do this, but I've not found it.

#The coordinates of this movement type for a 3x3 Lattice is commented below if interested. 
#X_Coordinates=[0, 1, 2, 0, 1, 2, 0, 1, 2]
#Y_Coordinates=[0, 0, 0, 1, 1, 1, 2, 2, 2]

def Movement(Lattice):
    N, M = Lattice.shape

    for i in range(N):
        for j in range(M): 
            EnergyCalc(Lattice, i, j)
            
#=========== Calls and saves values for measurements while the grid is being updated============            
            
    Mag.append(magnetization(Lattice))
    Energy.append(Energy_Of_The_System(Lattice))
    return Lattice


```
In the following part I Used Jake Vanderplas' [visualization tutorial](https://jakevdp.github.io/blog/2017/12/11/live-coding-cython-ising-model).

```python
def Visualize(Lattice):
    return Image.fromarray(np.uint8((Lattice + 1) * 0.5 * 255))  # 0 ... 255 Must be an 8 bit unsigned integer
    N_Frames=50

def Evolution(images):
    
    
    def show(frame=(0, len(images)-1)):
        
        
        return Visualize(images[frame])
    
    
    return interact(show)



images = [Grid]


for i in range(N_Frames):
    
    images.append(Movement(images[-1].copy()))
    
Evolution(images);
```


```python
FrameList=np.arange(0,len(Energy),1)

fig = make_subplots(
    rows=1, cols=2,
    specs=[[{"type": "bar"}, {"type": "pie"}],#I didn't change these. These specs just happend to work. Others don't
           ],
)

#Each fig.add_trace is a new graph
#Making traces on the same row and col allow them to be plotted together. 


#traces for Energy and Magnetization
fig.add_trace(go.Scatter(y=(Energy), name='Energy points(J)', mode='lines', marker_color='red'),row=1,col=1)
fig.add_trace(go.Scatter(y=(Mag), name='Magnetization(T)', mode='lines', marker_color='orchid'),row=1,col=1)
fig.update_layout(title='Evolution Data of The Ising Model',
                   xaxis_title='Frames',
                   yaxis_title='Quantity')

#Trace for the table
fig.add_trace(go.Table(
    header=dict(values=['Frame #','Energies', 'Magnetizations'],
                line_color='darkslategray',
                fill_color='lightskyblue',
                align='left'),
    cells=dict(values=[FrameList,Energy, Mag], # 2nd column
               line_color='darkslategray',
               fill_color='lightcyan',
               align='left')),row=1,col=2)            

fig.update_layout(width=1000, height=500, showlegend=True)

fig.show()
```
With a ferromagenetic configuration, there's some variation of the following 3 gifs. With the first being near critcal temperatures, the second being low temperature and the last being extrememly high temperatures. The first is what we'd like to see and would be considered to be working well.


![Critical](https://lh4.googleusercontent.com/1ut-V4qm406cM4edBu5ZYXlvWApbcBrLVvYhB9rvBefTnoRrKjdYrinxJsoF7SweRZrSi17il7_h8EFQktquIYItokbfzLzfu-KTnNKmfCeqw-LapAkAEdeI7FAwC9xgHgibcg)
![low](https://lh6.googleusercontent.com/0BZZX7-_BDXT1NsQWcZxIzBc73Khg7Pfj9HJRb00XPwU2xoc5Hs8aZTJR1MYtGHZg8a9cqsS8aw8qHQpbiTVcnV0UUF6WZ_MYA8yJFE)
![High](https://lh5.googleusercontent.com/xUQCWXPscYpazucr_PdnnO_pw20feGOuU2lS6N51Atj_g4gXA43SPGF0_dNjXeg4KrY3iQIfDrRzzRKwU9ZuT9OJOmw1cnTznP99-38)
